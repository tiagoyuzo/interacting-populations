%--------------------------------------------------------------------------
%   submatriz nao linear
%
%   constroi cada submatriz nao linear
%--------------------------------------------------------------------------
function [mepk,mdpk,meqk,mdqk] = submatnaolin(M,C,k,c,cst,p,pst,q,qst)
%--------------------------------------------------------------------------
global dt lambda kp rho nuc nup
%--------------------------------------------------------------------------
%   declaracao das submatrizes
%
%   mepk: k-esima submatriz a esquerda de p
%   mdpk: k-esima submatriz a direita de p
%   meqk: k-esima submatriz a esquerda de q
%   mdqk: k-esima submatriz a direita de q
%--------------------------------------------------------------------------
mepk = zeros(3,3);
mdpk = zeros(3,3);
meqk = zeros(3,3);
mdqk = zeros(3,3);
%--------------------------------------------------------------------------
%   pontos e pesos da quadratura para o triangulo padrao
%--------------------------------------------------------------------------
[w,t,nptos] = quadratura(1);
%--------------------------------------------------------------------------
%   parametros do modelo
%--------------------------------------------------------------------------
% [~,~,~,~,lambda,kp,rho,nuc,nup,~] = parametros;
%--------------------------------------------------------------------------
%   calculo de constantes auxiliares
%--------------------------------------------------------------------------
dt4 = dt/4;
%--------------------------------------------------------------------------
%   loop de cada ponto de integracao
%--------------------------------------------------------------------------
for m = 1:nptos
    %----------------------------------------------------------------------
    %   integracao numerica: xi e eta sao os pontos de integracao
    %----------------------------------------------------------------------
    xi = t(1,m);
    eta = t(2,m);
    %----------------------------------------------------------------------
    %   funcoes de base padrao e seus gradientes
    %----------------------------------------------------------------------
    [phi,~] = base(xi,eta);
    %----------------------------------------------------------------------
    %   transformacao afim: jacobiano da transformacao
    %----------------------------------------------------------------------
    [~,jacob] = transf(M,C,k);
    %----------------------------------------------------------------------
    %   calculo das constantes
    %----------------------------------------------------------------------
    %   preparacao de c^2
    %----------------------------------------------------------------------
    c2 = 0;
    for i = 1:3
        c2 = c2 + (c(M(i,k)) + cst(M(i,k)))*phi(i);
    end
    c2 = c2*c2;
    %----------------------------------------------------------------------
    wdt4jac = w(m)*dt4*jacob;
    %----------------------------------------------------------------------
    %   constantes da populacao p
    %----------------------------------------------------------------------
    cp1 = wdt4jac*lambda(2)/kp(2);
    cp2 = w(m)*rho(2)*dt/2*c2*jacob;
    cp3 = wdt4jac*nup(2);
    %----------------------------------------------------------------------
    %   constantes da populacao q
    %----------------------------------------------------------------------
    cq1 = wdt4jac*lambda(3)/kp(3);
    cq2 = w(m)*rho(3)*dt/2*c2*jacob;
    cq3 = wdt4jac*nup(3);
    %----------------------------------------------------------------------
    for i = 1:3
        for j = 1:3
            %--------------------------------------------------------------
            phi2 = phi(i)*phi(j);
            %--------------------------------------------------------------
            aux2 = cp2/(4*nuc(2) + c2)*phi2;
            mepk(i,j) = mepk(i,j) + aux2;
            mdpk(i,j) = mdpk(i,j) - aux2;
            %--------------------------------------------------------------
            aux2 = cq2/(4*nuc(3) + c2)*phi2;
            meqk(i,j) = meqk(i,j) + aux2;
            mdqk(i,j) = mdqk(i,j) - aux2;
            %--------------------------------------------------------------
            for l = 1:3
                phi3 = phi2*phi(l);
                %---==============================-------------------------
                %   nao linearidade da populacao p
                %---==============================-------------------------
                aux1 = cp1*(p(M(l,k)) + pst(M(l,k)))*phi3;
                aux3 = cp3*(q(M(l,k)) + qst(M(l,k)))*phi3;
                %----------------------------------------------------------
                %   soma de todos os termos
                %----------------------------------------------------------
                mepk(i,j) = mepk(i,j) + aux1 + aux3;
                mdpk(i,j) = mdpk(i,j) - aux1 - aux3;
                %---==============================-------------------------
                %   nao linearidade da populacao q
                %---==============================-------------------------
                aux1 = cq1*(q(M(l,k)) + qst(M(l,k)))*phi3;
                aux3 = cq3*(p(M(l,k)) + pst(M(l,k)))*phi3;
                %----------------------------------------------------------
                %   soma de todos os termos
                %----------------------------------------------------------
                meqk(i,j) = meqk(i,j) + aux1 + aux3;
                mdqk(i,j) = mdqk(i,j) - aux1 - aux3;
                %----------------------------------------------------------
            end
        end
    end
end
%--------------------------------------------------------------------------
end
%--------------------------------------------------------------------------